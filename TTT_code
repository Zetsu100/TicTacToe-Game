import pygame
import pygame_menu


from tkinter import *
import numpy as np

sob = 500
symbol_size = (sob /4 - sob / 9) / 2
symbol_thickness = 10
Xcolor = '#EB3493'
Ocolor = '#3DEB34'
std_color = '#8934EB'

pygame.init()
surface = pygame.display.set_mode((500, 500))

class Tic_Tac_ToePlayerBased():
    def __init__(self):
        self.window = Tk()
        self.window.title('Tic-Tac-Toe')
        self.canvas = Canvas(self.window, width=sob, height=sob, bg = '#222222')
        self.canvas.pack()
        self.window.bind('<Button-1>', self.click)

        self.initialize_board()
        self.pXt = True
        self.board_status = np.zeros(shape=(3, 3))

        self.pXs = True
        self.reset_board = False
        self.gameover = False
        self.tie = False
        self.Xw = False
        self.Ow = False

        self.Xs = 0
        self.Os = 0
        self.tie_score = 0

    def mainloop(self):
        self.window.mainloop()

    def initialize_board(self):
        for i in range(2):
            self.canvas.create_line((i + 1) * sob / 3, 0, (i + 1) * sob / 3, sob, fill = "#DDDDDD")

        for i in range(2):
            self.canvas.create_line(0, (i + 1) * sob / 3, sob, (i + 1) * sob / 3, fill = "#DDDDDD")

    def play_again(self):
        self.initialize_board()
        self.pXs = not self.pXs
        self.pXt = self.pXs
        self.board_status = np.zeros(shape=(3, 3))

    def draw_O(self, logical_position):
        logical_position = np.array(logical_position)
        grid_position = self.convertlgp(logical_position)
        self.canvas.create_oval(grid_position[0] - symbol_size, grid_position[1] - symbol_size,
                                grid_position[0] + symbol_size, grid_position[1] + symbol_size, width=symbol_thickness,
                                outline=Ocolor)

    def draw_X(self, logical_position):
        grid_position = self.convertlgp(logical_position)
        self.canvas.create_line(grid_position[0] - symbol_size, grid_position[1] - symbol_size,
                                grid_position[0] + symbol_size, grid_position[1] + symbol_size, width=symbol_thickness,
                                fill=Xcolor)
        self.canvas.create_line(grid_position[0] - symbol_size, grid_position[1] + symbol_size,
                                grid_position[0] + symbol_size, grid_position[1] - symbol_size, width=symbol_thickness,
                                fill=Xcolor)

    def display_gameover(self):

        if self.Xw:
            self.Xs += 1
            text = 'Winner: Player 1 (X)'
            color = Xcolor
        elif self.Ow:
            self.Os += 1
            text = 'Winner: Player 2 (O)'
            color = Ocolor
        else:
            self.tie_score += 1
            text = 'Its a tie'
            color = 'gray'

        self.canvas.delete("all")
        self.canvas.create_text(sob / 2, sob / 5, font="Times 30 bold", fill=color, text=text)

        score_text = 'Scores \n'
        self.canvas.create_text(sob / 2, 5 * sob / 11, font="cmr 30 bold", fill=std_color,
                                text=score_text)

        score_text =  'Player 1 (X): ' + str(self.Xs) + '\n'
        score_text += 'Player 2 (O): ' + str(self.Os) + '\n'
        score_text += 'Tie              : ' + str(self.tie_score)
        self.canvas.create_text(sob / 2, 3 * sob / 5, font="cmr 20 bold", fill=std_color,
                                text=score_text)
        self.reset_board = True

        score_text = 'Click to play again \n'
        self.canvas.create_text(sob / 2, 15 * sob / 16, font="cmr 20 bold", fill="gray",
                                text=score_text)

    def convertlgp(self, logical_position):
        logical_position = np.array(logical_position, dtype=int)
        return (sob / 3) * logical_position + sob / 6

    def convertglp(self, grid_position):
        grid_position = np.array(grid_position)
        return np.array(grid_position // (sob / 3), dtype=int)

    def is_grid_occupied(self, logical_position):
        if self.board_status[logical_position[0]][logical_position[1]] == 0:
            return False
        else:
            return True

    def is_winner(self, player):

        player = -1 if player == 'X' else 1

        for i in range(3):
            if self.board_status[i][0] == self.board_status[i][1] == self.board_status[i][2] == player:
                return True
            if self.board_status[0][i] == self.board_status[1][i] == self.board_status[2][i] == player:
                return True

        if self.board_status[0][0] == self.board_status[1][1] == self.board_status[2][2] == player:
            return True

        if self.board_status[0][2] == self.board_status[1][1] == self.board_status[2][0] == player:
            return True

        return False

    def is_tie(self):

        r, c = np.where(self.board_status == 0)
        tie = False
        if len(r) == 0:
            tie = True

        return tie

    def is_gameover(self):
        self.Xw = self.is_winner('X')
        if not self.Xw:
            self.Ow = self.is_winner('O')

        if not self.Ow:
            self.tie = self.is_tie()
        gameover = self.Xw or self.Ow or self.tie

        if self.Xw:
            print('X wins')
        if self.Ow:
            print('O wins')
        if self.tie:
            print('Its a tie')

        return gameover





    def click(self, event):
        grid_position = [event.x, event.y]
        logical_position = self.convertglp(grid_position)

        if not self.reset_board:
            if self.pXt:
                if not self.is_grid_occupied(logical_position):
                    self.draw_X(logical_position)
                    self.board_status[logical_position[0]][logical_position[1]] = -1
                    self.pXt = not self.pXt
            else:
                if not self.is_grid_occupied(logical_position):
                    self.draw_O(logical_position)
                    self.board_status[logical_position[0]][logical_position[1]] = 1
                    self.pXt = not self.pXt
           
            if self.is_gameover():
                self.display_gameover()
               
        else:  
            self.canvas.delete("all")
            self.play_again()
            self.reset_board = False
        print("balls")
        
grid_occupied = np.empty((3,3))
grid_occupied.fill(False)

class Tic_Tac_ToeAiBased():
    
    
    def __init__(self):
        self.window = Tk()
        self.window.title('Tic-Tac-Toe')
        self.canvas = Canvas(self.window, width=sob, height=sob, bg = '#222222')
        self.canvas.pack()
       
        self.window.bind('<Button-1>', self.mousein)
        
        self.initialize_board()
        self.pXt = True
        self.board_status = np.zeros(shape=(3, 3))

        self.pXs = True
        self.reset_board = False
        self.gameover = False
        self.tie = False
        self.Xw = False
        self.Ow = False

        self.Xs = 0
        self.Os = 0
        self.tie_score = 0
        self.comp_move()
       

    def mainloop(self):
        self.window.mainloop()
        
       
    def initialize_board(self):
        for i in range(2):
            self.canvas.create_line((i + 1) * sob / 3, 0, (i + 1) * sob / 3, sob, fill = "#DDDDDD")

        for i in range(2):
            self.canvas.create_line(0, (i + 1) * sob / 3, sob, (i + 1) * sob / 3, fill = "#DDDDDD")
    def play_again(self):
        self.initialize_board()
        self.pXs = self.pXs
        self.pXt = self.pXs
        self.board_status = np.zeros(shape=(3, 3))
        self.comp_move()
    def draw_O(self, logical_position):
        logical_position = np.array(logical_position)

        grid_position = self.convertlgp(logical_position)
        self.canvas.create_oval(grid_position[0] - symbol_size, grid_position[1] - symbol_size,
                                grid_position[0] + symbol_size, grid_position[1] + symbol_size, width=symbol_thickness,
                                outline=Ocolor)

    def draw_X(self, logical_position):
        grid_position = self.convertlgp(logical_position)
        self.canvas.create_line(grid_position[0] - symbol_size, grid_position[1] - symbol_size,
                                grid_position[0] + symbol_size, grid_position[1] + symbol_size, width=symbol_thickness,
                                fill=Xcolor)
        self.canvas.create_line(grid_position[0] - symbol_size, grid_position[1] + symbol_size,
                                grid_position[0] + symbol_size, grid_position[1] - symbol_size, width=symbol_thickness,
                                fill=Xcolor)

    def display_gameover(self):

        if self.Xw:
            self.Xs += 1
            text = 'Winner: Player 1 (X)'
            color = Xcolor
        elif self.Ow:
            self.Os += 1
            text = 'Winner: Player 2 (O)'
            color = Ocolor
        else:
            self.tie_score += 1
            text = 'Its a tie'
            color = 'gray'

        self.canvas.delete("all")
        self.canvas.create_text(sob / 2, sob / 5, font="Times 30 bold", fill=color, text=text)

        score_text = 'Scores \n'
        self.canvas.create_text(sob / 2, 5 * sob / 11, font="cmr 30 bold", fill=std_color,
                                text=score_text)

        score_text =  'Player 1 (X): ' + str(self.Xs) + '\n'
        score_text += 'Player 2 (O): ' + str(self.Os) + '\n'
        score_text += 'Tie              : ' + str(self.tie_score)
        self.canvas.create_text(sob / 2, 3 * sob / 5, font="cmr 20 bold", fill=std_color,
                                text=score_text)
        self.reset_board = True
        
        score_text = 'Close'
        self.canvas.create_text(sob / 2, 15 * sob / 16, font="cmr 20 bold", fill="gray",
                                text=score_text)

    def convertlgp(self, logical_position):
        logical_position = np.array(logical_position, dtype=int)
        return (sob / 3) * logical_position + sob / 6

    def convertglp(self, grid_position):
        grid_position = np.array(grid_position)
        return np.array(grid_position // (sob / 3), dtype=int)

    def is_grid_occupied(self, logical_position):
        if self.board_status[logical_position[0]][logical_position[1]] == 0:
            
            return False
        else:
            
            return True
    


   

    def comp_move(self):
       
        while(self.gameover == False):
            xr = np.random.choice([0,1,2])
            yr = np.random.choice([0,1,2])
           
            compost = [xr,yr]
            if self.is_grid_occupied(compost) == False:
                print("AI chooses: ", compost)
                logical_position = compost

                if not self.reset_board:
                    if self.pXt:
                        if not self.is_grid_occupied(logical_position):
                            self.draw_X(logical_position)
                            self.board_status[logical_position[0]][logical_position[1]] = -1
                            self.pXt = not self.pXt

                    else:
                        if not self.is_grid_occupied(logical_position):
                            self.draw_O(logical_position)
                            self.board_status[logical_position[0]][logical_position[1]] = 1
                            self.pXt = not self.pXt
                    if self.is_gameover():
                        self.display_gameover()
                        
                else:  
                    self.canvas.delete("all")
                    self.play_again()
                    self.reset_board = False
                
                break
               
           

    def is_winner(self, player):

        player = -1 if player == 'X' else 1

        
        for i in range(3):
            if self.board_status[i][0] == self.board_status[i][1] == self.board_status[i][2] == player:
                return True
            if self.board_status[0][i] == self.board_status[1][i] == self.board_status[2][i] == player:
                return True

        
        if self.board_status[0][0] == self.board_status[1][1] == self.board_status[2][2] == player:
            return True

        if self.board_status[0][2] == self.board_status[1][1] == self.board_status[2][0] == player:
            return True

        return False

    def is_tie(self):

        r, c = np.where(self.board_status == 0)
        tie = False
        if len(r) == 0:
            tie = True

        return tie

    def is_gameover(self):
        self.Xw = self.is_winner('X')
        if not self.Xw:
            self.Ow = self.is_winner('O')

        if not self.Ow:
            self.tie = self.is_tie()
        gameover = self.Xw or self.Ow or self.tie

        if self.Xw:
            print('X wins')
        if self.Ow:
            print('O wins')
        if self.tie:
            print('Its a tie')

        return gameover

       
    def click(self, grid_position):
       
        logical_position = self.convertglp(grid_position)
       
        if not self.reset_board:
            if self.pXt:
                if not self.is_grid_occupied(logical_position):
                    self.draw_X(logical_position)
                    self.board_status[logical_position[0]][logical_position[1]] = -1
                    self.pXt = not self.pXt
                    
            else:
                if not self.is_grid_occupied(logical_position):
                    self.draw_O(logical_position)
                    self.board_status[logical_position[0]][logical_position[1]] = 1
                    self.pXt = not self.pXt
                    
                    self.comp_move()
            
            if self.is_gameover():
                self.display_gameover()
                
        else:  
            self.canvas.delete("all")
            self.play_again()
            self.reset_board = False
       
               
       
    def mousein(self,event):
       
        self.click([event.x,event.y])
        

def start_the_game_2p():
    game_instance = Tic_Tac_ToePlayerBased()
    game_instance.mainloop()
def start_the_game_Ai():
    game_instance = Tic_Tac_ToeAiBased()
    game_instance.mainloop()

menu = pygame_menu.Menu('Welcome', 400, 300,
                       theme=pygame_menu.themes.THEME_SOLARIZED)

menu.add.button('2-Player Mode', start_the_game_2p)
menu.add.button('Play with Ai', start_the_game_Ai)
menu.add.button('Quit', pygame_menu.events.EXIT)

menu.mainloop(surface)